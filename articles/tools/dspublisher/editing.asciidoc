---
title: Editing Content
description: Learn how to structure and author the content of your documentation website.
order: 40
---

= Editing Content
:experimental:

== Content Path

Documentation page content is located in the `articles` folder by default. This content root path can be configured with the <<configuration#options, `ARTICLES_PATH` property>>.

== Page Hierarchy

The file and folder hierarchy defines the website URL and navigation structure directly.
Each <<asciidoc>> file (`.adoc` or `.asciidoc`) inside this folder corresponds to a page on the website.
For example:

[frame=none,grid=rows]
|===
| Path | URL | Navigation hierarchy

| `articles/components/button/style.adoc`
| `\https://localhost:8000/components/button/style`
| menu:Components[Button > Style]
|===

Each folder should have an `index.adoc` file, which defines the title and description of that section, and optionally some content for the index page. An empty index page displays an automatically generated section outline (i.e. a listing of the sub-pages in that section).


[[metadata]]
== Page Metadata (Front Matter)

Each AsciiDoc file starts with a YAML formatted metadata block called the “front matter”, defined between lines with three dashes.
The following front matter attributes can be defined in this block. Only the `title` attribute is required, others are optional.

[small]
`title` string::
The page's title as shown in the navigation menus/trees, breadcrumbs, search results, and social media share previews. This title can be different from the main page heading (the largest heading on the page), which is defined using AsciiDoc. For tabbed pages, this title attribute defines the main page heading as well.
+
[small]
`description` string::
Page description. Shown under the main page heading and in section outlines. Also used in social media share previews.
+
[small]
`layout` string::
Only useful for `index.adoc` pages. Set to `tabbed-page` to display the pages in this section as tabs on the index page instead of as child items in the navigation tree.
+
[small]
`tab-title` string::
The title displayed for this page when it is displayed as a tab. Useful if you want to show a shorter title in the tab and a longer one in the breadcrumb or search results.
+
[small]
`page-links` list of string::
Links which are displayed in the page header. Can be used for linking, for example, to the component repository, Figma file, or other resources. The links are defined using AsciiDoc syntax, and they can also contain simple formatting.
+
[small]
`order` number::
Overrides the placement of the page in the navigation tree among the sibling pages in the same section. By default, pages are ordered alphabetically based on the title. Pages without an order are placed after ordered pages. It's a good practice to make them spaced by 10 or 100, so that can add articles without changing the number in other articles.
+
[small]
`banner` string::
Define a banner which is shown directly under the site header. A banner defined in the root `index.adoc` file is shown on all documentation pages, but it can be overridden with a page level banner.
+
[small]
`banner-style` string::
Define the banner style. Possible values are `tip`, `important`, `warning`, and `caution`.
+
[small]
`section-nav` string::
Allows you to control the page navigation item. Possible values are:
+
- `expanded`: Expand this section in the navigation tree by default. Only applicable for `index.adoc` pages, which are not using tabbed page layout.
- `hidden`: Hide this page from the navigation tree, section outlines, and page navigation at the bottom of each page. If you set this on an `index.adoc` page, all sub-pages are also hidden from the navigation tree, but they are not hidden from section outlines or page navigation.
+
You can also use a custom value. The value appears as a class name on the corresponding HTML element in the navigation tree and section outlines, which allows you to add custom CSS styles for that item.
+
[small]
`url` string::
Define an external URL to link to. This causes the page to not be created on the documentation website (all content is ignored), and the navigation item is instead a link to this external URL.

=== Page Metadata Example

.`index.adoc`
[source,yaml]
----
---
title: Accordion
description: Accordion is a vertically stacked set of expandable panels. It reduces clutter and helps maintain the user's focus by showing only the relevant content at any time.
layout: tabbed-page
tab-title: Usage
page-links:
  - https://github.com/vaadin/vaadin-flow-components/releases/tag/{moduleMavenVersion:com.vaadin:vaadin-accordion-flow}[Flow {moduleMavenVersion:com.vaadin:vaadin-accordion-flow}]
  - https://github.com/vaadin/web-components/tree/v{moduleNpmVersion:@vaadin/accordion}/packages/accordion[Web Component {moduleNpmVersion:@vaadin/accordion}]
order: 10
banner: See the new https://example.org/blog[blog post]!
banner-style: tip
section-nav: beta-component
---

// This is the main page heading...
= Accordion

// ...and the rest of the page content goes here
----

== Page Partials

Files, whose name starts with an underscore (`_`) and which don't define any page metadata ("front matter"), do not appear as a page in the website. These files can be used to share content using AsciiDoc's `include::[]` directive.

== Main Landing Page

The main landing page of the documentation website is defined with the `articles/index.adoc` file.
The `title` front matter attribute defines the visible title in the website header.

[[asciidoc]]
== AsciiDoc Syntax

The AsciiDoctor site has a https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/[quick reference for the AsciiDoc syntax].

Here's a list of some useful features:

- https://docs.asciidoctor.org/asciidoc/latest/tables/build-a-basic-table/[Tables]
- https://docs.asciidoctor.org/asciidoc/latest/blocks/admonitions/[Admonitions] (highlighted note blocks)
- https://docs.asciidoctor.org/asciidoc/latest/directives/include/[Includes] (embed content from another file)









[[code]]
== Code Examples

You can display program or other text formatted in monospace letters in a box separated with `----`.

====
For example:
----
  ----
  This is some kind of {code} text.
  ----
----

It would render as:

----
This is some kind of {code} text.
----
====

[[code.file-types]]
=== Source File Types

DS Publisher supports syntax highlighting for various languages. The most commonly used ones are:

[cols="1m,1",frame=none,grid=rows,role="small"]
|===
|[source,java]
|Java files

|[source,typescript]
|TypeScript files

|[source,html]
|HTML files and TypeScript files where the HTML part is most important.

|[source,css]
|Style sheets
|===

====
For example:

pass:[<!-- vale Vaadin.SourceCode = NO -->]

----
  [source,java]
  ----
  Button button = new Button("My Button");
  ----
----

pass:[<!-- vale Vaadin.SourceCode = YES -->]

It would render as:

[source,java]
----
Button button = new Button("My Button");
----
====

[[code.include]]
=== Including Code Examples from Source Files

You can include code examples from any file in the documentation project. Primarily, from files in the `frontend` and `src/main/java` source code folders, but practically from any folder in the project. The benefit of including them from the source code folders is that those files are compiled during the build, which ensures that any compilation errors in the code examples are caught early.

Some technical cases, where you can't use compiled examples, require writing <<code.inline, inline examples>>.

Use the `include::[]` directive to include them in code blocks as follows:

[source,asciidoc]
----
  [source,java]
  ----
  include::/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
  ----
----

You can pass various parameters to the include directive, between the trailing square brackets, to affect how the code example is included.


[[code.include.parameters]]
=== Include Parameters

[small]
`render`::
Renders a live example, as described in <<code.live>>.
+
[small]
`hidden`::
Hides the example.
This is necessary for TypeScript counterparts of Java examples, which are only included to load component styles, as described in <<code.single.typescript-counterparts, Live Java Examples Require TypeScript Counterpart>>.
+
[small]
`tags=<name>`::
Specifies tags for extracting a source code snippets. See <<snippets>> for more information.

+
[small]
`indent=<spaces>`::
Specifies the indentation of the code inside the listing.
Without the parameter, the indentation in the source listing is used.
You should use `indent=0`.
+
[small]
`group=<name>`::
Groups the file under a group tab.
You should use this for language groups, such as `group=Java` and `group=TypeScript` in corresponding include statements.
You shouldn't use it if you only have a single group, as it would show an unnecessary tab.


==== Snippets

Snippets are segments of code examples that are displayed by default, instead of the entire source code of an included file.
The *Expand code* button above the example reveals the rest of the included file.
This can be useful for making it easier for readers to see the most relevant part of the example.

Snippets are defined in the source code as comments:

- `tag::snippet[]` marks the beginning of the snippet
- `end::snippet[]` marks the end of the snippet

Write the comment in the format defined for the example's syntax highlighting.
For TypeScript examples, this means that code tagged with `[source,html]` must use HTML comments within an HTML literal in the code.

[.example]
--
.Java
----
public MyComponentExample() {
  // tag::snippet[]
  MyComponent myc = new MyComponent("My component");
  // end::snippet[]
  add(myc);
}
----

.TypeScript
----
render() {
  // tag::snippet[]
  return html`
    <my-component>My component</my-component>
  `;
  // tag::snippet[]
}
----

.HTML
----
<div>
  <!-- tag::snippet[] -->
  <my-component>My component</my-component>
  <!-- end::snippet[] -->
</div>
----

.CSS
----
/* tag::snippet[] */
html {
  color: black;
}
/* end::snippet[] */
----
--

Snippets must be enabled in the `include::[]` directive in the page content, by adding the `tags=snippet` attribute in the brackets following the path:

[source,asciidoc,subs="verbatim,quotes"]
-----
[source,java]
----
\include::...[...,*tags=snippet*]
----
-----

See https://docs.asciidoctor.org/asciidoc/latest/directives/include-tagged-regions/[Including Content by Tagged Regions] in the AsciiDoc documentation to learn more how you can use snippets.



==== Excluding Source Code Lines

Parts of the source code can be entirely omitted from the rendered code examples by appending a specific comment after the line.

----
// hidden-source-line
----

This is useful for excluding code that's only needed for the embedded example but not relevant for normal use of the component.



=== Listing Multiple Files in a Code Example

You can have multiple files in a code example if you specify them inside an `.example` style block.
This is a good practice for showing a UI source code example, while having a data model or resource files available.

====
[source,asciidoc]
----
  [.example]
  --
  [source,java]
  ----
  include::/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
  ----

  [source,java]
  ----
  include::/src/main/java/com/vaadin/demo/flow/application/events/EventsAnon.java[tags=snippet,indent=0]
  ----
  --
----

The above looks as follows:

[.example]
--
[source,java]
----
include::/src/main/java/com/vaadin/demo/flow/application/events/EventsLambda.java[tags=snippet,indent=0]
----

[source,java]
----
include::/src/main/java/com/vaadin/demo/flow/application/events/EventsAnon.java[tags=snippet,indent=0]
----
--
====


[[code.live]]
=== Rendered Examples

An example is rendered live if the `include::` statement contains a `render` attribute.
You also need to contain the example in a `[.example]` style block.
The optional `.show-code` style shows the code automatically.
Otherwise the reader needs to click to open it.

Only Java and TypeScript examples can render live code examples.

A live example of a Java class requires that it has a [classname]`DemoExporter` implementation as a static subclass, and that there is a TypeScript counterpart that includes the used components, as described in <<code.single.typescript-counterparts, Live Java Examples Require TypeScript Counterpart>>.

.TypeScript code examples don't refresh automatically
[NOTE]
The code example displayed below a rendered example isn't automatically refreshed.
To refresh the code example the page's text content needs to be re-saved for DS Publisher to rebuild the page, and you need to reload the page.

====
[source,asciidoc]
----
  [.example]
  --
  Here is optional text to describe the Java example.
  You could mention things like the [classname]`Button` class.

  [source,java]
  ----
  include::/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
  ----

  Here is optional text to describe the TypeScript example.
  You could mention things like the [methodname]`render()` method.

  [source,typescript]
  ----
  include::/frontend/demo/flow/application/events/events-basic.ts[render, indent=0, group=TypeScript]
  ----
  --
----

A Java class used to render a live example requires an inner static demo exporter implementation class, such as in the following:

[source,java]
----
@Route("application-events-lambda")
public class EventsLambda extends Div {
    ...

    public static class Exporter extends DemoExporter<EventsLambda> { // hidden-source-line
    } // hidden-source-line
}
----

The lines marked with `// hidden-source-line` are hidden.

The above example renders as follows:

[.example]
--
Here is optional text to describe the Java example.
You could mention things like the [classname]`Button` class.

[source,java]
----
include::/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
----

Here is optional text to describe the TypeScript example.
You could mention things like the [methodname]`render()` method.

[source,typescript]
----
include::/frontend/demo/flow/application/events/events-basic.ts[render, tags=snippet, indent=0, group=TypeScript]
----
--
====

==== Example Box Styles

As shown above, an example box shows live and multi-language examples with source code.
The following styles control its behaviour:

`example`::
The basic example box style.

`show-code`::
Automatically shows the code listing.
It's by default initially closed.
+
[source,asciidoc]
----
[.example.show-code]
----

`render-only`::
Don't show code listing at all.
+
[source,asciidoc]
----
[.example.render-only]
----
+
This doesn't disable the language group tabs.
An example box shows them if the include statement has the `group` parameter.


=== Single-Language Examples

You can have examples only in one language.
In such case, you should leave the `group` parameter out, as otherwise the example has an unnecessary group tab.

[[code.single.typescript-counterparts]]
==== Rendered Java Examples Require TypeScript Counterpart

Styles for any components that are used in an example are only loaded for TypeScript examples.
You therefore always need a TypeScript counterpart for any Java example.
Otherwise, the components aren't styled and the example appears broken.
The TypeScript example doesn't need to be functional, it only needs to import the needed components.

The example shouldn't have a `group` parameter, and the TypeScript example should have parameter `hidden` instead of `render`.

[source,asciidoc]
----
  [.example.show-code]
  --
  [source,java]
  ----
  include::/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
  ----

  [source,typescript]
  ----
  include::/frontend/demo/flow/application/events/events-basic.ts[hidden, indent=0, group=TypeScript]
  ----
  --
----

The above renders, with the TypeScript code hidden, as follows:

[.example.show-code]
--
[source,java]
----
include::/src/main/java/com/vaadin/demo/flow/application/events/EventsBasic.java[render,tags=snippet,indent=0,group=Java]
----

[source,typescript]
----
include::/frontend/demo/flow/application/events/events-basic.ts[hidden, indent=0, group=TypeScript]
----
--

[[code.inline]]
== Inline Examples

Certain technical examples must be unique, so it isn't possible to use `include::`, described later.
For example, examples of Java annotations like [classname]`@Theme` that can only be defined for a single class in an application can't be inline.
Java examples in Vaadin Docs run in a single Vaadin application, so they can't have more unique definitions.







== Adding Rendered UI Examples

Dependencies for custom components are added to [filename]`pom.xml` the same way as a <<{articles}/styling/custom-theme/creating-custom-theme#,custom theme JAR>>.
Components and themes can be included in the same dependency if desired.

Before embedding a component example on a page, you need to create the example itself.

=== Java Examples

Examples of Java-based components (for the Flow framework) are placed in sub-folders inside [filename]`src/main/java/com/vaadin/demo/component`.
Each example needs to be in its own file.

----
my-docs
└── src/main
    └── java/com/vaadin
        └── demo
            └── component
                ├── accordion
                ⋮   ├── AccordionBasic.java
                ⋮   ├── AccordionDisabledPanels.java
                ⋮   ⋮
                ├── mycomponent
                ⋮   ├── MyComponentExample.java
                ⋮   ⋮
----


To add examples for a new component, create a folder inside the component folder with a Java file inside it.

.`MyComponentExample.java`
[source,java]
----
package com.vaadin.demo.component.mycomponent;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.router.Route;
import com.vaadin.demo.DemoExporter; // hidden-source-line
import com.example.MyComponent;

@Route("my-component-example") // <2>
public class MyComponentExample extends Div { // <1>

  public MyComponentExample() {§
    MyComponent myc = new MyComponent("My component");
    add(myc); // <3>
  }

  public static class Exporter extends // <4>
    DemoExporter<MyComponentExample> {} // hidden-source-line
}
----
<1> A class that extends `Div` or some other container like `VerticalLayout`
<2> with a `@Route` annotation with a route name that's unique within the entire website
<3> and a constructor that adds the desired UI as a child to the class.
<4> A static inner class that extends the `DemoExporter` class with a type parameter matching the example class.

Design System Publisher uses `spring-boot-devtools` to automatically rebuild the Java examples when they've been modified and saved, if the editor or IDE used for editing is correctly configured.
Rebuilding the Java examples typically takes about 30 seconds, after which the page must be manually reloaded.

=== TypeScript Examples

Examples of TypeScript-based components are placed in sub-folders inside frontend/demo/component.
Each example needs to be in its own file.

----
my-docs
└── frontend
    └── demo
        └── component
            ├── accordion
            ⋮   ├── accordion-basic.ts
            ⋮   ├── accordion-disabled-panels.ts
            ⋮   ⋮
            ├── my-component
            ⋮   ├── my-component-example.ts
            ⋮   ⋮
----

To add examples for a new component, create a folder inside the component folder with a TypeScript file inside it.

.`my-component-example.ts`
[source,typescript]
----
import '../../init'; // hidden-source-line
import { applyTheme } from 'generated/theme';
import { html, LitElement, customElement } from 'lit-element';

import '@my-org/my-component/my-component';

@customElement('my-component-example') // <1>
export class Example extends LitElement { // <2>
  protected createRenderRoot() { // <3>
    const root = super.createRenderRoot();
    applyTheme(root);
    return root;
  }

  render() { // <4>
    return html`
      <my-component>My component</my-component>
    `;
  }
}
----
<1> A `@customElement` annotation with a name that's unique within the entire website.
<2> A class that extends `LitElement`.
<3> A `createRenderRoot()` method that calls the `applyTheme(root)` method (this applies your custom theme to the example).
<4> A render method that returns the HTML for the example.

Whenever changes to a TypeScript example are saved, Publisher rebuilds the example and automatically refreshes the page after a couple of seconds.

=== Embedding Examples in a Page

Component examples are embedded into pages using the `include::path/to/example[render]` directive inside a `[source]` listing block.
Only Java or TypeScript examples can render live UI examples.

[.example]
--
[source,asciidoc,subs="-attributes"]
-----
<source-info group="Java"></source-info>
[source,java]
----
\include::{root}/src/main/java/com/vaadin/demo/component/mycomponent/MyComponent.java[render]
----
-----

[source,asciidoc,subs="-attributes"]
-----
<source-info group="TypeScript"></source-info>
[source,typescript]
----
\include::{root}/frontend/demo/component/my-component/my-component.ts[render]
----
-----
--


[discussion-id]`6DF51E1C-15BB-4E15-A3C7-5C616B7BFC35`
